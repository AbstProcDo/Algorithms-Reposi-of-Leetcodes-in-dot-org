* 引言,追求聪明的人生态度
# 写给2020的情书.
王小波在<人性的逆转>中写道:
#+BEGIN_QUOTE
"追求聪明是一种人生态度";
#+END_QUOTE
在<智慧与国学>中, 又阐述道:
#+BEGIN_QUOTE
我觉得西方的智者有一股不管三七二十一，总要把自己往聪明里弄的劲头儿。
#+END_QUOTE

以上......
为练习算法的缘起.

断断续续从Leetcode中刷了1000多道题目,

因为有Emacs'org这样的高效工具, 过程中, 得以题干及解法(py)分类归档, 随时备查备用.

比如前1000道题目中有三道素数题
#+ATTR_HTML: :width 300px
[[file:images/prime-2020-01-01.png]]

以及多道二分查找题目:
#+ATTR_HTML: :width 300px
[[file:images/bs-2020-01-01.png]]

Sacha Chua的三字立身哲学: learn--> share--> scale

https://sachachua.com/blog/2012/11/coming-up-with-a-three-word-life-philosophy/

So learn by sharing.

文档结构, 宏观二分为算法和数据结构, 先从算法的Binary Search开始, 采用螺旋交叉的方法, 每种算法与每种数据结构, 列5~10道题, 至少5道,至多10道; 然后进入下一个算法或者数据结构;循环一轮过后, 进入第二轮.
* Binary.Search
解题不能用蛮力, 不然练一万道题目也无济于事.
从审题到测试,分为四步走, Sort, Strategy, Solve and Check,
四步科学解题以及任何问题的步骤.
Sort是将题干中所有的条件都列出来, 其余的后文陆续分享.

** [[278.First Bad Version #easy]]                          :easy:binary_search:
*** Reference
- [First Bad Version - LeetCode](https://leetcode.com/problems/first-bad-version/)
*** Question
You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.
Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.
You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.
#+BEGIN_EXAMPLE
  Given n = 5, and version = 4 is the first bad version.

  call isBadVersion(3) -> false
  call isBadVersion(5) -> true
  call isBadVersion(4) -> true

  Then 4 is the first bad version.
#+END_EXAMPLE

*** Solution
分析题目: 第一步Sort:
1) Given(已知条件)
- an API bool isBadVersion(version)
- n versions [1, 2, ..., n]
2) Find(要求得的结果)
to find the first bad version.
3) Requirements(有哪些要求和限制)
You should minimize the number of calls to the API.
# 就是求最优算法呗, 说了等于没说.
列出来之后, 可以就直接套模板.

#+BEGIN_SRC ipython :session leetcode
  class Solution:
      def firstBadVersion(self, n):
          """
          :type n: intx
          :rtype: int
          """
          lo = 1
          hi = n -1
          while lo < hi:
              mid = (lo+hi) // 2
              if not isBadVersion(mid): # good
                  lo = mid + 1
              else:
                  hi = mid
          return lo
#+END_SRC

# Private, 从mit那里学来的f(x)=0的关系,
* Reverse
** [[https://leetcode.com/problems/reverse-string/][344.Reverse String]] :easy:

*** Question:
Write a function that reverses a string. The input string is given as an array of characters char[].

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

You may assume all the characters consist of printable ascii characters.

*** Solution
#+begin_src python
class Solution:
    def reverseString(self, s: List[str]) -> None:
        """
        Do not return anything, modify s in-place instead.
        """
        start, stop = 0, len(s)-1
        while start < stop:
            s[start], s[stop] = s[stop], s[start]
            start += 1
            stop -= 1
#+end_src

** [[https://leetcode.com/problems/reverse-words-in-a-string/][151.Reverse Words in a String]]  :easy:
*** Question
Given an input string, reverse the string word by word.
*** Solution
#+begin_src python
class Solution:
    def reverseWords(self, s: str) -> str:
        r = s.split()
        r.reverse()
        return ' '.join(r)
#+end_src

** [[https://leetcode.com/problems/reverse-words-in-a-string-iii/][557.Reverse Words in a String III]] :easy:
*** Question
Given a string, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.

#+BEGIN_EXAMPLE
Example 1:

Input: "Let's take LeetCode contest"
Output: "s'teL ekat edoCteeL tsetnoc"
#+END_EXAMPLE

Note: In the string, each word is separated by single space and there will not be any extra space in the string.

*** Solution
#+begin_src ipython
class Solution1:
    def reverseWords(self, s: str) -> str:
        s = s[::-1]
        s = s.split()
        s = s[::-1]
        s = " ".join(s)
        return s
# Standard solution
class Solution2:
    def rev(self, s, start, end):
        while(start < end):
            temp = s[start]
            s[start] = s[end]
            s[end] = temp
            start += 1
            end -= 1
# exchange positions
    def reverseWords(self, s: str) -> str:
        n = len(s)
        if n <= 1:
            return s

        s = list(s)
        word_start = 0

        for word_end in range(n):
            if s[word_end]  == " ":
                self.rev(s, word_start, word_end - 1)
                word_start = word_end + 1

        self.rev(s, word_start, n - 1)
        return "".join(s)
#+end_src

** [[https://leetcode.com/problems/reverse-linked-list/][206.Reverse Linked List]] :easy:
*** Question:
Reverse a singly linked list.

#+BEGIN_EXAMPLE
Example:
Input: 1->2->3->4->5->NULL
Output: 5->4->3->2->1->NULL
#+END_EXAMPLE

Follow up:
A linked list can be reversed either iteratively or recursively. Could you implement both?

*** The Solution

#+begin_src python
#iteration
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
#a clear solution
# 脑中始终有三个概念
class Solution1:
    def reverseList(self, head: 'ListNode') -> 'ListNode':
        cur= head # explict declare
        nex= prev = None
        # 找到nex
        while cur != None:
            nex = cur.next # remember the next
            cur.next = prev # relink to prev
            prev = cur # reset prev
            cur= nex  # move to the next
        head = prev
        return head

#Recursion
class Solution2:
    def reverseList(self, head: ListNode) -> ListNode:
        if head == None or head.next == None: return head
        prev = self.reverseList(head.next)
        head.next.next = head
        head.next = None
        return prev
#+end_src
** 总结
特殊的置换方法
#+begin_src ipython :session leetcode :results output
def rev(self, s, start, end):
    while(start < end):
        temp = s[start]
        s[start] = s[end]
        s[end] = temp
        start += 1
        end -= 1
#+end_src
